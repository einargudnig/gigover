name: Main CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.changes.outputs.web }}
      new-frontend: ${{ steps.changes.outputs.new-frontend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      functions: ${{ steps.changes.outputs.functions }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            web:
              - 'web/**'
            new-frontend:
              - 'new-frontend/**'
            frontend:
              - 'frontend/**'
            functions:
              - 'functions/**'

  lint-and-test:
    runs-on: ubuntu-latest
    needs: detect-changes
    strategy:
      matrix:
        project: [
          { name: 'web', path: 'web', needs: 'web' },
          { name: 'new-frontend', path: 'new-frontend', needs: 'new-frontend' },
          { name: 'frontend', path: 'frontend', needs: 'frontend' },
          { name: 'functions', path: 'functions/functions', needs: 'functions' }
        ]
    steps:
      - name: Checkout code
        if: needs.detect-changes.outputs[matrix.project.needs] == 'true'
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: needs.detect-changes.outputs[matrix.project.needs] == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project.path }}/package-lock.json

      - name: Install dependencies
        if: needs.detect-changes.outputs[matrix.project.needs] == 'true'
        run: |
          cd ${{ matrix.project.path }}
          npm ci

      - name: Run linting
        if: needs.detect-changes.outputs[matrix.project.needs] == 'true' && matrix.project.name != 'functions'
        run: |
          cd ${{ matrix.project.path }}
          npm run lint

      - name: Run TypeScript check
        if: needs.detect-changes.outputs[matrix.project.needs] == 'true'
        run: |
          cd ${{ matrix.project.path }}
          npx tsc --noEmit

      - name: Run tests
        if: needs.detect-changes.outputs[matrix.project.needs] == 'true' && matrix.project.name == 'web'
        run: |
          cd ${{ matrix.project.path }}
          npm test

  build:
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-and-test]
    strategy:
      matrix:
        project: [
          { name: 'web', path: 'web', needs: 'web' },
          { name: 'new-frontend', path: 'new-frontend', needs: 'new-frontend' },
          { name: 'frontend', path: 'frontend', needs: 'frontend' },
          { name: 'functions', path: 'functions/functions', needs: 'functions' }
        ]
    steps:
      - name: Checkout code
        if: needs.detect-changes.outputs[matrix.project.needs] == 'true'
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: needs.detect-changes.outputs[matrix.project.needs] == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project.path }}/package-lock.json

      - name: Install dependencies
        if: needs.detect-changes.outputs[matrix.project.needs] == 'true'
        run: |
          cd ${{ matrix.project.path }}
          npm ci

      - name: Build project
        if: needs.detect-changes.outputs[matrix.project.needs] == 'true'
        run: |
          cd ${{ matrix.project.path }}
          npm run build

      - name: Upload build artifacts
        if: needs.detect-changes.outputs[matrix.project.needs] == 'true' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.project.name }}-build
          path: |
            ${{ matrix.project.path }}/dist/
            ${{ matrix.project.path }}/build/
            ${{ matrix.project.path }}/lib/
          retention-days: 30

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: github.event_name == 'pull_request'
    environment: staging
    strategy:
      matrix:
        project: [
          { name: 'web', path: 'web', needs: 'web', site: 'gigover-web-staging' },
          { name: 'new-frontend', path: 'new-frontend', needs: 'new-frontend', site: 'gigover-new-frontend-staging' },
          { name: 'frontend', path: 'frontend', needs: 'frontend', site: 'gigover-frontend-staging' }
        ]
    steps:
      - name: Checkout code
        if: needs.detect-changes.outputs[matrix.project.needs] == 'true'
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: needs.detect-changes.outputs[matrix.project.needs] == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project.path }}/package-lock.json

      - name: Install dependencies
        if: needs.detect-changes.outputs[matrix.project.needs] == 'true'
        run: |
          cd ${{ matrix.project.path }}
          npm ci

      - name: Build for staging
        if: needs.detect-changes.outputs[matrix.project.needs] == 'true'
        run: |
          cd ${{ matrix.project.path }}
          npm run build
        env:
          NODE_ENV: staging

      - name: Deploy to Firebase Hosting (Staging)
        if: needs.detect-changes.outputs[matrix.project.needs] == 'true'
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}
          projectId: ${{ secrets.FIREBASE_PROJECT_ID_STAGING }}
          channelId: live
          entryPoint: ${{ matrix.project.path }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: github.ref == 'refs/heads/main'
    environment: production
    strategy:
      matrix:
        project: [
          { name: 'web', path: 'web', needs: 'web' },
          { name: 'new-frontend', path: 'new-frontend', needs: 'new-frontend' },
          { name: 'frontend', path: 'frontend', needs: 'frontend' }
        ]
    steps:
      - name: Checkout code
        if: needs.detect-changes.outputs[matrix.project.needs] == 'true'
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: needs.detect-changes.outputs[matrix.project.needs] == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project.path }}/package-lock.json

      - name: Install dependencies
        if: needs.detect-changes.outputs[matrix.project.needs] == 'true'
        run: |
          cd ${{ matrix.project.path }}
          npm ci

      - name: Build for production
        if: needs.detect-changes.outputs[matrix.project.needs] == 'true'
        run: |
          cd ${{ matrix.project.path }}
          npm run build
        env:
          NODE_ENV: production

      - name: Deploy to Firebase Hosting (Production)
        if: needs.detect-changes.outputs[matrix.project.needs] == 'true'
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PRODUCTION }}
          projectId: ${{ secrets.FIREBASE_PROJECT_ID_PRODUCTION }}
          channelId: live
          entryPoint: ${{ matrix.project.path }}

  deploy-functions:
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: needs.detect-changes.outputs.functions == 'true' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: functions/functions/package-lock.json

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install dependencies
        run: |
          cd functions/functions
          npm ci

      - name: Build functions
        run: |
          cd functions/functions
          npm run build

      - name: Deploy Firebase Functions
        run: |
          cd functions
          firebase deploy --only functions --token ${{ secrets.FIREBASE_TOKEN }}
        env:
          FIREBASE_PROJECT: ${{ secrets.FIREBASE_PROJECT_ID_PRODUCTION }}