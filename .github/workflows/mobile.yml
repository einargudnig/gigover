name: Mobile App CI

on:
  push:
    branches: [main, develop]
    paths: ['app/**']
  pull_request:
    branches: [main, develop]
    paths: ['app/**']
  release:
    types: [published]

env:
  FLUTTER_VERSION: '3.13.0'
  JAVA_VERSION: '11'

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Get dependencies
        run: |
          cd app
          flutter pub get

      - name: Verify Flutter formatting
        run: |
          cd app
          dart format --output=none --set-exit-if-changed .

      - name: Analyze Flutter code
        run: |
          cd app
          flutter analyze

      - name: Run Flutter tests
        run: |
          cd app
          flutter test

  build-android:
    runs-on: ubuntu-latest
    needs: analyze
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Get dependencies
        run: |
          cd app
          flutter pub get

      - name: Setup Android signing
        if: github.event_name == 'release'
        run: |
          cd app/android
          echo '${{ secrets.ANDROID_KEYSTORE_BASE64 }}' | base64 --decode > app/keystore.jks
          echo 'storeFile=keystore.jks' >> key.properties
          echo 'storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}' >> key.properties
          echo 'keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}' >> key.properties
          echo 'keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}' >> key.properties

      - name: Build Android APK (Debug)
        if: github.event_name != 'release'
        run: |
          cd app
          flutter build apk --debug

      - name: Build Android APK (Release)
        if: github.event_name == 'release'
        run: |
          cd app
          flutter build apk --release

      - name: Build Android App Bundle (Release)
        if: github.event_name == 'release'
        run: |
          cd app
          flutter build appbundle --release

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: app/build/app/outputs/flutter-apk/*.apk
          retention-days: 30

      - name: Upload App Bundle artifact
        if: github.event_name == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: android-aab
          path: app/build/app/outputs/bundle/release/*.aab
          retention-days: 90

  build-ios:
    runs-on: macos-latest
    needs: analyze
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Get dependencies
        run: |
          cd app
          flutter pub get

      - name: Setup iOS signing
        if: github.event_name == 'release'
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        run: |
          # Create temporary keychain
          security create-keychain -p "${{ secrets.IOS_KEYCHAIN_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.IOS_KEYCHAIN_PASSWORD }}" build.keychain
          
          # Import certificate
          echo $IOS_CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P $IOS_CERTIFICATE_PASSWORD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.IOS_KEYCHAIN_PASSWORD }}" build.keychain
          
          # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo $IOS_PROVISIONING_PROFILE_BASE64 | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

      - name: Build iOS (Debug)
        if: github.event_name != 'release'
        run: |
          cd app
          flutter build ios --debug --no-codesign

      - name: Build iOS (Release)
        if: github.event_name == 'release'
        run: |
          cd app
          flutter build ios --release

      - name: Build iOS Archive
        if: github.event_name == 'release'
        run: |
          cd app/ios
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath build/Runner.xcarchive \
            archive

      - name: Export IPA
        if: github.event_name == 'release'
        run: |
          cd app/ios
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build/

      - name: Upload iOS artifact
        if: github.event_name == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: app/ios/build/*.ipa
          retention-days: 90

  distribute-firebase:
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: github.event_name == 'release' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android APK
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: ./artifacts/android/

      - name: Download iOS IPA
        if: github.event_name == 'release'
        uses: actions/download-artifact@v4
        with:
          name: ios-ipa
          path: ./artifacts/ios/

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Distribute Android to Firebase App Distribution
        run: |
          firebase appdistribution:distribute ./artifacts/android/*.apk \
            --app ${{ secrets.FIREBASE_ANDROID_APP_ID }} \
            --groups "testers" \
            --release-notes "Build from commit ${{ github.sha }}" \
            --token ${{ secrets.FIREBASE_TOKEN }}

      - name: Distribute iOS to Firebase App Distribution
        if: github.event_name == 'release'
        run: |
          firebase appdistribution:distribute ./artifacts/ios/*.ipa \
            --app ${{ secrets.FIREBASE_IOS_APP_ID }} \
            --groups "testers" \
            --release-notes "Build from commit ${{ github.sha }}" \
            --token ${{ secrets.FIREBASE_TOKEN }}

  publish-stores:
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android App Bundle
        uses: actions/download-artifact@v4
        with:
          name: android-aab
          path: ./artifacts/android/

      - name: Upload to Google Play Console
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: com.gigover.mittverk
          releaseFiles: ./artifacts/android/*.aab
          track: production
          status: draft
          inAppUpdatePriority: 2

      - name: Download iOS IPA
        uses: actions/download-artifact@v4
        with:
          name: ios-ipa
          path: ./artifacts/ios/

      - name: Upload to App Store Connect
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: ./artifacts/ios/*.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}